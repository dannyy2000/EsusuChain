{"snapshots":{"/home/danielakinsanya/esusu_chain/cadence/tests/EsusuChain_test.cdc":{"filePath":"/home/danielakinsanya/esusu_chain/cadence/tests/EsusuChain_test.cdc","baseContent":"import Test\nimport BlockchainHelpers\nimport \"EsusuChain\"\nimport \"FungibleToken\"\nimport \"FiatToken\"\n\naccess(all) let admin = Test.getAccount(0x0000000000000007)\naccess(all) let alice = Test.createAccount()\naccess(all) let bob = Test.createAccount()\naccess(all) let charlie = Test.createAccount()\naccess(all) let diana = Test.createAccount()\n\naccess(all) fun setup() {\n    // Deploy contracts\n    let err = Test.deployContract(\n        name: \"EsusuChain\",\n        path: \"../contracts/EsusuChain.cdc\",\n        arguments: []\n    )\n    Test.expect(err, Test.beNil())\n}\n\n// ========================================\n// Circle Creation Tests\n// ========================================\n\naccess(all) fun testCreateCircleManager() {\n    let txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n}\n\naccess(all) fun testCreateCircle() {\n    // Setup circle manager first\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Create a circle with 4 members, 100.0 USDC contribution, 7 day cycle\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [4 as UInt64, 100.0, 604800.0], // 7 days in seconds\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Verify circle info\n    let scriptResult = executeScript(\n        \"../scripts/get_circle_info.cdc\",\n        [0 as UInt64]\n    )\n    Test.expect(scriptResult, Test.beSucceeded())\n\n    let circleInfo = scriptResult.returnValue! as! {String: AnyStruct}\n    Test.assertEqual(4 as UInt64, circleInfo[\"numberOfMembers\"]! as! UInt64)\n    Test.assertEqual(100.0, circleInfo[\"contributionAmount\"]! as! UFix64)\n    Test.assertEqual(0 as UInt64, circleInfo[\"currentCycle\"]! as! UInt64)\n    Test.assertEqual(1, circleInfo[\"memberCount\"]! as! Int) // Creator is first member\n}\n\naccess(all) fun testCreateCircleWithInvalidParameters() {\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Try to create circle with only 1 member (should fail)\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [1 as UInt64, 100.0, 604800.0],\n        alice\n    )\n    Test.expect(txResult, Test.beFailed())\n\n    // Try to create circle with 0 contribution amount (should fail)\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [4 as UInt64, 0.0, 604800.0],\n        alice\n    )\n    Test.expect(txResult, Test.beFailed())\n\n    // Try to create circle with 0 cycle duration (should fail)\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [4 as UInt64, 100.0, 0.0],\n        alice\n    )\n    Test.expect(txResult, Test.beFailed())\n}\n\naccess(all) fun testJoinCircle() {\n    // Setup and create circle\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [3 as UInt64, 50.0, 86400.0], // 3 members, 50 USDC, 1 day cycle\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Bob joins the circle\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        bob\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Charlie joins the circle\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        charlie\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Verify circle is now full\n    let scriptResult = executeScript(\n        \"../scripts/get_circle_info.cdc\",\n        [0 as UInt64]\n    )\n    Test.expect(scriptResult, Test.beSucceeded())\n\n    let circleInfo = scriptResult.returnValue! as! {String: AnyStruct}\n    Test.assertEqual(3, circleInfo[\"memberCount\"]! as! Int)\n\n    // Verify member info for Bob\n    let memberResult = executeScript(\n        \"../scripts/get_member_info.cdc\",\n        [0 as UInt64, bob.address]\n    )\n    Test.expect(memberResult, Test.beSucceeded())\n\n    let memberInfo = memberResult.returnValue! as! EsusuChain.MemberInfo?\n    Test.assert(memberInfo != nil, message: \"Member info should exist\")\n    Test.assertEqual(bob.address, memberInfo!.address)\n    Test.assertEqual(1 as UInt64, memberInfo!.position)\n}\n\naccess(all) fun testCannotJoinFullCircle() {\n    // Setup and create circle with 2 members\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [2 as UInt64, 50.0, 86400.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Bob joins (circle is now full)\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        bob\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Charlie tries to join (should fail - circle is full)\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        charlie\n    )\n    Test.expect(txResult, Test.beFailed())\n}\n\naccess(all) fun testCannotJoinCircleTwice() {\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [3 as UInt64, 50.0, 86400.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Alice is already a member (creator), trying to join again should fail\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        alice\n    )\n    Test.expect(txResult, Test.beFailed())\n}\n\n// ========================================\n// Contribution Tests\n// ========================================\n\naccess(all) fun testSetupUSDCVault() {\n    let txResult = executeTransaction(\n        \"../transactions/setup_usdc_vault.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Check balance (should be 0)\n    let scriptResult = executeScript(\n        \"../scripts/check_usdc_balance.cdc\",\n        [alice.address]\n    )\n    Test.expect(scriptResult, Test.beSucceeded())\n    Test.assertEqual(0.0, scriptResult.returnValue! as! UFix64)\n}\n\n// Note: The following tests would require minting USDC tokens\n\n\naccess(all) fun testContributionFlow() {\n    // This is a conceptual test showing the expected flow\n    // In production, you would:\n    // 1. Setup USDC vaults for all members\n    // 2. Mint USDC to members\n    // 3. Members make contributions\n    // 4. Verify contributions are recorded\n    // 5. Test automatic payout trigger when all members contribute\n\n    // Setup circle\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [3 as UInt64, 100.0, 86400.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Members join\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        bob\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        charlie\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // TODO: Add USDC minting and contribution tests when FiatToken is deployed\n}\n\n// ========================================\n// Payout Tests\n// ========================================\n\naccess(all) fun testPayoutFlow() {\n    // This is a conceptual test showing the expected payout flow\n    // In production, you would:\n    // 1. Create circle with members\n    // 2. All members contribute\n    // 3. Execute payout to first member\n    // 4. Verify member received correct amount (contribution * number of members)\n    // 5. Advance to next cycle\n    // 6. Repeat until all members have received payouts\n\n    // TODO: Implement full payout test with USDC integration\n}\n\n// ========================================\n// Integration Tests\n// ========================================\n\naccess(all) fun testFullCircleLifecycle() {\n    // This test demonstrates a complete circle lifecycle\n    // 1. Create circle\n    // 2. Members join\n    // 3. Cycle 1: All contribute, member 1 gets payout\n    // 4. Cycle 2: All contribute, member 2 gets payout\n    // 5. Cycle 3: All contribute, member 3 gets payout\n    // 6. Circle completes\n\n    // Setup\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Create circle with 3 members\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [3 as UInt64, 100.0, 86400.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Bob and Charlie join\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        bob\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    txResult = executeTransaction(\n        \"../transactions/join_circle.cdc\",\n        [0 as UInt64],\n        charlie\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Verify circle is ready\n    let scriptResult = executeScript(\n        \"../scripts/get_circle_info.cdc\",\n        [0 as UInt64]\n    )\n    Test.expect(scriptResult, Test.beSucceeded())\n\n    let circleInfo = scriptResult.returnValue! as! {String: AnyStruct}\n    Test.assertEqual(3, circleInfo[\"memberCount\"]! as! Int)\n    Test.assertEqual(0 as UInt64, circleInfo[\"currentCycle\"]! as! UInt64)\n    Test.assertEqual(0 as UInt64, circleInfo[\"currentPayoutPosition\"]! as! UInt64)\n\n    // TODO: Add contribution and payout tests with USDC\n}\n\naccess(all) fun testGetUserCircles() {\n    // Setup and create multiple circles\n    var txResult = executeTransaction(\n        \"../transactions/setup_circle_manager.cdc\",\n        [],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Create first circle\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [3 as UInt64, 50.0, 86400.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Create second circle\n    txResult = executeTransaction(\n        \"../transactions/create_circle.cdc\",\n        [4 as UInt64, 100.0, 604800.0],\n        alice\n    )\n    Test.expect(txResult, Test.beSucceeded())\n\n    // Get Alice's circles\n    let scriptResult = executeScript(\n        \"../scripts/get_user_circles.cdc\",\n        [alice.address]\n    )\n    Test.expect(scriptResult, Test.beSucceeded())\n\n    let circleIds = scriptResult.returnValue! as! [UInt64]\n    Test.assertEqual(2, circleIds.length)\n    Test.assertEqual(0 as UInt64, circleIds[0])\n    Test.assertEqual(1 as UInt64, circleIds[1])\n}\n","baseTimestamp":1760046723133,"deltas":[{"timestamp":1760046733834,"changes":[{"type":"DELETE","lineNumber":236,"oldContent":"    // This is a conceptual test showing the expected flow"},{"type":"DELETE","lineNumber":237,"oldContent":"    // In production, you would:"},{"type":"INSERT","lineNumber":236,"content":""}]},{"timestamp":1760046783768,"changes":[{"type":"DELETE","lineNumber":236,"oldContent":""},{"type":"MODIFY","lineNumber":236,"content":" // 1. Setup USDC vaults for all members","oldContent":"    // 1. Setup USDC vaults for all members"}]},{"timestamp":1760046799940,"changes":[{"type":"DELETE","lineNumber":280,"oldContent":"    // This is a conceptual test showing the expected payout flow"},{"type":"DELETE","lineNumber":281,"oldContent":"    // In production, you would:"}]},{"timestamp":1760047463935,"changes":[{"type":"DELETE","lineNumber":374,"oldContent":"    // Get Alice's circles"}]}]}}}